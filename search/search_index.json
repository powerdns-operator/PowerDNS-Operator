{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"PowerDNS Operator Documentation","text":""},{"location":"#what-is-powerdns-operator","title":"What is PowerDNS Operator","text":"<p>PowerDNS Operator is a Kubernetes operator that bridges the gap between Kubernetes and PowerDNS, enabling you to manage DNS infrastructure using familiar Kubernetes patterns and tools. Instead of manually configuring PowerDNS zones and records, you can now use declarative Kubernetes resources that automatically sync with your PowerDNS server.</p>"},{"location":"#why-powerdns-operator","title":"Why PowerDNS Operator","text":"<p>We needed to offer DNS capabilities to users and considered relying on the PowerDNS-Admin project. However, we wanted a more flexible solution that could be natively integrated with our existing Kubernetes infrastructure. We were also looking for a solution that could be easily integrated with our GitOps workflow to automate the creation of DNS records as well as other resources such as Ingress, Services, etc.</p> <p>Another reason is that the PowerDNS-Admin project is facing maintenance challenges and will be rewritten in the future.</p> <p>The PowerDNS Operator provides a declarative approach to DNS management, unlike PowerDNS-Admin's imperative interface. It's a convenient way to offer self-service DNS capabilities to users, allowing them to create resources directly in the Kubernetes cluster. Additionally, you can use GitOps, Backstage or any Internal Developer Platform and connect it to the Kubernetes API server that contains the PowerDNS Operator if you don't want to grant direct access to the Kubernetes cluster.</p>"},{"location":"#how-it-works","title":"How It Works","text":"<p>The operator follows the standard Kubernetes operator pattern:</p> <ol> <li>Custom Resources: You define DNS zones and records using Kubernetes Custom Resource Definitions (CRDs)</li> <li>Event-Driven Reconciliation: The operator responds to Kubernetes events (create, update, delete) for these resources</li> <li>PowerDNS API: When events are detected, the operator translates them into PowerDNS API calls</li> <li>Declarative Management: The operator applies your Kubernetes declarations to PowerDNS during reconciliation events</li> </ol> <p>This creates a seamless integration where your DNS infrastructure becomes part of your Kubernetes GitOps workflow.</p> <p>API Compatibility</p> <p>This operator uses the official PowerDNS API and cannot be used with PowerDNS-Admin's custom API. Both can coexist but should not manage the same resources.</p>"},{"location":"#core-concepts","title":"Core Concepts","text":""},{"location":"#dns-zones","title":"DNS Zones","text":"<p>Zones represent the top-level domains you want to manage. The operator supports two types:</p> <ul> <li>ClusterZones: Available across all namespaces in your cluster</li> <li>Zones: Scoped to specific namespaces for better isolation</li> </ul>"},{"location":"#dns-records-rrsets","title":"DNS Records (RRSets)","text":"<p>Records define the actual DNS entries within zones. Like zones, records can be:</p> <ul> <li>ClusterRRSets: Global records accessible from any namespace</li> <li>RRSets: Namespace-scoped records for better security and organization</li> </ul>"},{"location":"#resource-relationships","title":"Resource Relationships","text":"<p>Understanding how resources relate to each other is crucial:</p> <pre><code>ClusterZone (example.com)\n\u251c\u2500\u2500 ClusterRRset (www.example.com)\n\u2514\u2500\u2500 RRset (blog.example.com)\n\u2514\u2500\u2500 Zone (app.example.com)\n    \u2514\u2500\u2500 RRset (api.app.example.com)\n</code></pre>"},{"location":"#architecture-overview","title":"Architecture Overview","text":"<p>The operator consists of several key components:</p> <ul> <li>Controllers: Handle the reconciliation logic for each resource type</li> <li>PowerDNS Client: Manages communication with the PowerDNS API</li> <li>RBAC Integration: Provides fine-grained access control</li> <li>Metrics: Built-in monitoring and observability</li> </ul>"},{"location":"#getting-started","title":"Getting Started","text":"<p>If you're new to PowerDNS Operator, we recommend following this path:</p> <ol> <li>Overview - Understand the architecture and design principles</li> <li>Getting Started - Installation and basic configuration</li> <li>Resource Guides - Learn about each resource type in detail</li> </ol>"},{"location":"#use-cases","title":"Use Cases","text":"<p>PowerDNS Operator is particularly valuable for:</p> <ul> <li>GitOps Workflows: Manage DNS alongside your application deployments</li> <li>Multi-tenant Environments: Isolate DNS management by namespace</li> <li>Automated DNS: Generate DNS records from Kubernetes services and ingresses</li> <li>Infrastructure as Code: Version control your entire DNS infrastructure</li> </ul>"},{"location":"guides/clusterrrsets/","title":"ClusterRRset deployment","text":""},{"location":"guides/clusterrrsets/#specification","title":"Specification","text":"<p>The <code>ClusterRRset</code> specification contains the following fields:</p> Field Type Required Description type string Y Type of the record (e.g. \"A\", \"PTR\", \"MX\") name string Y Name of the record ttl uint32 Y DNS TTL of the records, in seconds records []string Y All records in this Resource Record Set comment string N Comment on RRSet zoneRef ZoneRef Y ZoneRef reference the zone the ClusterRRSet depends on <p>The <code>ZoneRef</code> specification contains the following fields:</p> Field Type Required Description name string Y Name of the <code>ClusterZone</code>/<code>Zone</code> kind string Y Kind of zone (Zone/ClusterZone)"},{"location":"guides/clusterrrsets/#example","title":"Example","text":"<pre><code>apiVersion: dns.cav.enablers.ob/v1alpha2\nkind: ClusterRRset\nmetadata:\n  name: test.helloworld.com\nspec:\n  comment: nothing to tell\n  type: A\n  name: test\n  ttl: 300\n  records:\n    - 1.1.1.1\n    - 2.2.2.2\n  zoneRef:\n    name: helloworld.com\n    kind: \"ClusterZone\"\n</code></pre> <p>Note: The name can be canonical or not. If not, the name of the <code>ClusterZone</code>/<code>Zone</code> will be appended</p>"},{"location":"guides/clusterrrsets/#reconciliation-flow","title":"Reconciliation Flow","text":"<p>The following diagram illustrates the reconciliation flow for ClusterRRset resources:</p> <pre><code>sequenceDiagram\n    participant U as User\n    participant K as Kubernetes API\n    participant C as Controller\n    participant P as PowerDNS API\n    participant M as Metrics\n\n    U-&gt;&gt;K: kubectl apply clusterrrset.yaml\n    K-&gt;&gt;C: ClusterRRset Created Event\n\n    Note over C: Reconciliation Loop Starts\n    C-&gt;&gt;C: Check Deletion Timestamp\n\n    alt Resource is being deleted\n        C-&gt;&gt;P: DELETE /api/v1/servers/localhost/zones/example.com/records\n        P--&gt;&gt;C: RRset Deleted\n        C-&gt;&gt;C: Remove Finalizers\n        C-&gt;&gt;K: Update ClusterRRset\n        Note over C: Deletion Complete\n    else Resource is being created/updated\n        C-&gt;&gt;C: Add Finalizers if missing\n        C-&gt;&gt;K: Get Referenced Zone (ClusterZone)\n\n        alt Zone not found\n            C-&gt;&gt;K: Set Pending Status\n            C-&gt;&gt;K: Set Zone Not Available Condition\n            C-&gt;&gt;M: Update Metrics\n            Note over C: Requeue after 2s\n        else Zone found\n            C-&gt;&gt;C: Check Zone Status\n\n            alt Zone in Failed Status\n                C-&gt;&gt;K: Set Failed Status\n                C-&gt;&gt;K: Set Zone Unavailable Condition\n                C-&gt;&gt;M: Update Metrics\n                Note over C: Reconciliation Failed\n            else Zone Available\n                C-&gt;&gt;C: Check for duplicate RRsets\n\n                alt Duplicate RRset found\n                    C-&gt;&gt;K: Set Failed Status\n                    C-&gt;&gt;K: Set Duplicated Condition\n                    C-&gt;&gt;M: Update Metrics\n                    Note over C: Reconciliation Failed\n                else No duplicates\n                    C-&gt;&gt;P: GET /api/v1/servers/localhost/zones/example.com/records\n\n                    alt RRset doesn't exist in PowerDNS\n                        C-&gt;&gt;P: POST /api/v1/servers/localhost/zones/example.com/records\n                        Note over P: Create RRset with records\n                        P--&gt;&gt;C: RRset Created Successfully\n                    else RRset exists in PowerDNS\n                        C-&gt;&gt;C: Compare desired vs actual state\n                        alt Differences found\n                            C-&gt;&gt;P: PATCH /api/v1/servers/localhost/zones/example.com/records\n                            P--&gt;&gt;C: RRset Updated Successfully\n                        end\n                    end\n\n                    C-&gt;&gt;K: Set Owner Reference\n                    C-&gt;&gt;K: Update ClusterRRset Status\n                    C-&gt;&gt;K: Set Available Condition\n                    C-&gt;&gt;M: Update Metrics\n                    Note over C: Reconciliation Succeeded\n                end\n            end\n        end\n    end\n\n    K--&gt;&gt;U: ClusterRRset Status Updated</code></pre>"},{"location":"guides/clusterzones/","title":"ClusterZone deployment","text":""},{"location":"guides/clusterzones/#specification","title":"Specification","text":"<p>The <code>ClusterZone</code> specification contains the following fields:</p> Field Type Required Description kind string Y Kind of the zone, one of \"Native\", \"Master\", \"Slave\", \"Producer\", \"Consumer\" nameservers []string Y List of the nameservers of the zone catalog string N The catalog this zone is a member of soa_edit_api string N The SOA-EDIT-API metadata item, one of \"DEFAULT\", \"INCREASE\", \"EPOCH\", defaults to \"DEFAULT\""},{"location":"guides/clusterzones/#example","title":"Example","text":"<pre><code>apiVersion: dns.cav.enablers.ob/v1alpha2\nkind: ClusterZone\nmetadata:\n  name: helloworld.com\nspec:\n  nameservers:\n    - ns1.helloworld.com\n    - ns2.helloworld.com\n  kind: Master\n  catalog: catalog.helloworld\n  soa_edit_api: EPOCH\n</code></pre>"},{"location":"guides/clusterzones/#reconciliation-flow","title":"Reconciliation Flow","text":"<p>The following diagram illustrates the reconciliation flow for ClusterZone resources:</p> <pre><code>sequenceDiagram\n    participant U as User\n    participant K as Kubernetes API\n    participant C as Controller\n    participant P as PowerDNS API\n    participant M as Metrics\n\n    U-&gt;&gt;K: kubectl apply clusterzone.yaml\n    K-&gt;&gt;C: ClusterZone Created Event\n\n    Note over C: Reconciliation Loop Starts\n    C-&gt;&gt;C: Check Deletion Timestamp\n\n    alt Resource is being deleted\n        C-&gt;&gt;P: DELETE /api/v1/servers/localhost/zones/example.com\n        P--&gt;&gt;C: Zone Deleted\n        C-&gt;&gt;C: Remove Finalizers\n        C-&gt;&gt;K: Update ClusterZone\n        Note over C: Deletion Complete\n    else Resource is being created/updated\n        C-&gt;&gt;C: Add Finalizers if missing\n        C-&gt;&gt;C: Check for duplicate zones\n\n        alt Duplicate zone found\n            C-&gt;&gt;K: Set Failed Status\n            C-&gt;&gt;K: Set Duplicated Condition\n            C-&gt;&gt;M: Update Metrics\n            Note over C: Reconciliation Failed\n        else No duplicates\n            C-&gt;&gt;P: GET /api/v1/servers/localhost/zones/example.com\n\n            alt Zone doesn't exist in PowerDNS\n                C-&gt;&gt;P: POST /api/v1/servers/localhost/zones\n                Note over P: Create Zone with NS records\n                P--&gt;&gt;C: Zone Created Successfully\n            else Zone exists in PowerDNS\n                C-&gt;&gt;C: Compare desired vs actual state\n                alt Differences found\n                    C-&gt;&gt;P: PATCH /api/v1/servers/localhost/zones/example.com\n                    P--&gt;&gt;C: Zone Updated Successfully\n                end\n            end\n\n            C-&gt;&gt;K: Update ClusterZone Status\n            C-&gt;&gt;K: Set Available Condition\n            C-&gt;&gt;M: Update Metrics\n            Note over C: Reconciliation Succeeded\n        end\n    end\n\n    K--&gt;&gt;U: ClusterZone Status Updated</code></pre>"},{"location":"guides/metrics/","title":"Metrics","text":"<p>The PowerDNS Operator exposes Prometheus metrics for monitoring and observability.</p>"},{"location":"guides/metrics/#available-metrics","title":"Available Metrics","text":"Metric Type Description Labels <code>clusterzones_status</code> gauge ClusterZone status <code>name</code>, <code>status</code> <code>zones_status</code> gauge Zone status <code>name</code>, <code>namespace</code>, <code>status</code> <code>clusterrrsets_status</code> gauge ClusterRRset status <code>fqdn</code>, <code>name</code>, <code>status</code>, <code>type</code> <code>rrsets_status</code> gauge RRset status <code>fqdn</code>, <code>name</code>, <code>namespace</code>, <code>status</code>, <code>type</code>"},{"location":"guides/metrics/#status-values","title":"Status Values","text":"<ul> <li><code>Succeeded</code>: Resource successfully reconciled</li> <li><code>Failed</code>: Resource reconciliation failed</li> <li><code>Pending</code>: Resource waiting for dependencies</li> </ul>"},{"location":"guides/metrics/#example-metrics","title":"Example Metrics","text":"<p>Based on the example configuration:</p> <pre><code># Cluster zones\nclusterzones_status{name=\"example.org\",status=\"Succeeded\"} 1\n\n# Cluster records\nclusterrrsets_status{fqdn=\"example.org.\",name=\"mx.example.org\",status=\"Succeeded\",type=\"MX\"} 1\nclusterrrsets_status{fqdn=\"example.org.\",name=\"soa.example.org\",status=\"Succeeded\",type=\"SOA\"} 1\nclusterrrsets_status{fqdn=\"ns1.example.org.\",name=\"ns1.example.org\",status=\"Succeeded\",type=\"A\"} 1\nclusterrrsets_status{fqdn=\"ns2.example.org.\",name=\"ns2.example.org\",status=\"Succeeded\",type=\"A\"} 1\n\n# Namespace zones\nzones_status{name=\"myapp1.example.org\",namespace=\"myapp1\",status=\"Succeeded\"} 1\n\n# Namespace records\nrrsets_status{fqdn=\"myapp1.example.org.\",name=\"soa.myapp1.example.org\",namespace=\"myapp1\",status=\"Succeeded\",type=\"SOA\"} 1\nrrsets_status{fqdn=\"front.myapp1.example.org.\",name=\"front.myapp1.example.org\",namespace=\"myapp1\",status=\"Succeeded\",type=\"A\"} 1\n</code></pre>"},{"location":"guides/metrics/#monitoring-setup","title":"Monitoring Setup","text":""},{"location":"guides/metrics/#servicemonitor","title":"ServiceMonitor","text":"<p>When using Prometheus Operator, the operator can be monitored using a ServiceMonitor resource. This is the recommended approach in Kubernetes environments:</p> <p>Helm Chart Integration</p> <p>If you're using the Helm chart, ServiceMonitor creation can be enabled with: <pre><code>metrics:\n  serviceMonitor:\n    enabled: true\n</code></pre></p> <pre><code>apiVersion: monitoring.coreos.com/v1\nkind: ServiceMonitor\nmetadata:\n  name: powerdns-operator-metrics\n  namespace: powerdns-operator-system\nspec:\n  endpoints:\n  - interval: 15s\n    port: http-metrics\n    scheme: http\n    scrapeTimeout: 10s\n  namespaceSelector:\n    matchNames:\n    - powerdns-operator-system\n  selector:\n    matchLabels:\n      control-plane: controller-manager\n</code></pre>"},{"location":"guides/metrics/#grafana-dashboard-wip","title":"Grafana Dashboard (WIP)","text":"<p>Coming Soon</p> <p>Grafana dashboards for PowerDNS Operator metrics will be available in a future release. These dashboards will provide pre-configured visualizations for monitoring DNS zone and record status, reconciliation metrics, and operator performance.</p>"},{"location":"guides/rrsets/","title":"RRset deployment","text":""},{"location":"guides/rrsets/#specification","title":"Specification","text":"<p>The <code>RRset</code> specification contains the following fields:</p> Field Type Required Description type string Y Type of the record (e.g. \"A\", \"PTR\", \"MX\") name string Y Name of the record ttl uint32 Y DNS TTL of the records, in seconds records []string Y All records in this Resource Record Set comment string N Comment on RRSet zoneRef ZoneRef Y ZoneRef reference the zone the RRSet depends on <p>The <code>ZoneRef</code> specification contains the following fields:</p> Field Type Required Description name string Y Name of the <code>ClusterZone</code>/<code>Zone</code> kind string Y Kind of zone (Zone/ClusterZone)"},{"location":"guides/rrsets/#example","title":"Example","text":"<pre><code>apiVersion: dns.cav.enablers.ob/v1alpha2\nkind: RRset\nmetadata:\n  name: test.helloworld.com\n  namespace: default\nspec:\n  comment: nothing to tell\n  type: A\n  name: test\n  ttl: 300\n  records:\n    - 1.1.1.1\n    - 2.2.2.2\n  zoneRef:\n    name: helloworld.com\n    kind: \"Zone\"\n</code></pre> <p>Note: The name can be canonical or not. If not, the name of the <code>ClusterZone</code>/<code>Zone</code> will be appended</p>"},{"location":"guides/rrsets/#reconciliation-flow","title":"Reconciliation Flow","text":"<p>The following diagram illustrates the reconciliation flow for RRset resources:</p> <pre><code>sequenceDiagram\n    participant U as User\n    participant K as Kubernetes API\n    participant C as Controller\n    participant P as PowerDNS API\n    participant M as Metrics\n\n    U-&gt;&gt;K: kubectl apply rrset.yaml -n default\n    K-&gt;&gt;C: RRset Created Event (namespace-scoped)\n\n    Note over C: Reconciliation Loop Starts\n    C-&gt;&gt;C: Check Deletion Timestamp\n\n    alt Resource is being deleted\n        C-&gt;&gt;P: DELETE /api/v1/servers/localhost/zones/example.com/records\n        P--&gt;&gt;C: RRset Deleted\n        C-&gt;&gt;C: Remove Finalizers\n        C-&gt;&gt;K: Update RRset\n        Note over C: Deletion Complete\n    else Resource is being created/updated\n        C-&gt;&gt;C: Add Finalizers if missing\n        C-&gt;&gt;K: Get Referenced Zone (Zone/ClusterZone)\n\n        alt Zone not found\n            C-&gt;&gt;K: Set Pending Status\n            C-&gt;&gt;K: Set Zone Not Available Condition\n            C-&gt;&gt;M: Update Metrics\n            Note over C: Requeue after 2s\n        else Zone found\n            C-&gt;&gt;C: Check Zone Status\n\n            alt Zone in Failed Status\n                C-&gt;&gt;K: Set Failed Status\n                C-&gt;&gt;K: Set Zone Unavailable Condition\n                C-&gt;&gt;M: Update Metrics\n                Note over C: Reconciliation Failed\n            else Zone Available\n                C-&gt;&gt;C: Check for duplicate RRsets (namespace-aware)\n\n                alt Duplicate RRset found\n                    C-&gt;&gt;K: Set Failed Status\n                    C-&gt;&gt;K: Set Duplicated Condition\n                    C-&gt;&gt;M: Update Metrics\n                    Note over C: Reconciliation Failed\n                else No duplicates\n                    C-&gt;&gt;P: GET /api/v1/servers/localhost/zones/example.com/records\n\n                    alt RRset doesn't exist in PowerDNS\n                        C-&gt;&gt;P: POST /api/v1/servers/localhost/zones/example.com/records\n                        Note over P: Create RRset with records\n                        P--&gt;&gt;C: RRset Created Successfully\n                    else RRset exists in PowerDNS\n                        C-&gt;&gt;C: Compare desired vs actual state\n                        alt Differences found\n                            C-&gt;&gt;P: PATCH /api/v1/servers/localhost/zones/example.com/records\n                            P--&gt;&gt;C: RRset Updated Successfully\n                        end\n                    end\n\n                    C-&gt;&gt;K: Set Owner Reference\n                    C-&gt;&gt;K: Update RRset Status\n                    C-&gt;&gt;K: Set Available Condition\n                    C-&gt;&gt;M: Update Metrics\n                    Note over C: Reconciliation Succeeded\n                end\n            end\n        end\n    end\n\n    K--&gt;&gt;U: RRset Status Updated</code></pre>"},{"location":"guides/warnings/","title":"Common Issues and Solutions","text":""},{"location":"guides/warnings/#record-format-requirements","title":"Record Format Requirements","text":""},{"location":"guides/warnings/#canonical-names","title":"Canonical Names","text":"<p>Some record types require canonical format (ending with a dot <code>.</code>):</p>"},{"location":"guides/warnings/#cname-records","title":"CNAME Records","text":"<pre><code>---\napiVersion: dns.cav.enablers.ob/v1alpha2\nkind: RRset\nmetadata:\n  name: test4.helloworld.com\nspec:\n  type: CNAME\n  name: test4\n  ttl: 300\n  records:\n    - test1.helloworld.com.\n  zoneRef:\n    name: helloworld.com\n    kind: \"Zone\"\n</code></pre>"},{"location":"guides/warnings/#ptr-records","title":"PTR Records","text":"<pre><code>---\napiVersion: dns.cav.enablers.ob/v1alpha2\nkind: RRset\nmetadata:\n  name: 1.1.168.192.in-addr.arpa.helloworld.com\nspec:\n  type: PTR\n  name: \"1\"\n  ttl: 300\n  records:\n    - mailserver.helloworld.com.\n  zoneRef:\n    name: 1.168.192.in-addr.arpa\n    kind: \"Zone\"\n</code></pre>"},{"location":"guides/warnings/#mx-records","title":"MX Records","text":"<pre><code>---\napiVersion: dns.cav.enablers.ob/v1alpha2\nkind: RRset\nmetadata:\n  name: mx.helloworld.com\nspec:\n  type: MX\n  name: \"helloworld.com.\"\n  ttl: 300\n  records:\n    - \"10 mailserver1.helloworld.com.\"\n    - \"20 mailserver2.helloworld.com.\"\n  zoneRef:\n    name: helloworld.com\n    kind: \"Zone\"\n</code></pre>"},{"location":"guides/warnings/#srv-records","title":"SRV Records","text":"<pre><code>---\napiVersion: dns.cav.enablers.ob/v1alpha2\nkind: RRset\nmetadata:\n  name: database.srv.helloworld.com\nspec:\n  type: SRV\n  name: \"_database._tcp.myapp\"\n  ttl: 300\n  records:\n    - 1 50 25565 test2.helloworld.com.\n  zoneRef:\n    name: helloworld.com\n    kind: \"Zone\"\n</code></pre>"},{"location":"guides/warnings/#txt-records","title":"TXT Records","text":"<p>TXT records must be properly quoted. If you see this error:</p> <pre><code>Parsing record content: Data field in DNS should start with quote (\") at position 0\n</code></pre> <p>Solution: Ensure TXT records start and end with escaped quotes:</p> <pre><code>---\napiVersion: dns.cav.enablers.ob/v1alpha2\nkind: RRset\nmetadata:\n  name: txt.helloworld.com\nspec:\n  type: TXT\n  name: \"helloworld.com.\"\n  ttl: 300\n  records:\n    - \"\\\"Welcome to the helloworld.com domain\\\"\"\n  zoneRef:\n    name: helloworld.com\n    kind: \"Zone\"\n</code></pre>"},{"location":"guides/warnings/#common-error-scenarios","title":"Common Error Scenarios","text":""},{"location":"guides/warnings/#zone-conflicts","title":"Zone Conflicts","text":"<ul> <li>Error: Zone shows \"Failed\" status with \"Already existing Zone\" message</li> <li>Cause: Multiple zones with the same FQDN</li> <li>Solution: Remove duplicate zones or use different names</li> </ul>"},{"location":"guides/warnings/#missing-dependencies","title":"Missing Dependencies","text":"<ul> <li>Error: RRset shows \"Pending\" status</li> <li>Cause: Referenced zone does not exist or is unhealthy</li> <li>Solution: Create the zone first or fix zone issues</li> </ul>"},{"location":"guides/warnings/#api-connectivity","title":"API Connectivity","text":"<ul> <li>Error: Resources stuck in \"Pending\" status</li> <li>Cause: PowerDNS API unreachable or authentication failed</li> <li>Solution: Check API URL, key, and network connectivity</li> </ul>"},{"location":"guides/warnings/#best-practices","title":"Best Practices","text":"<ol> <li>Use canonical names for CNAME, PTR, MX, and SRV records</li> <li>Quote TXT records properly with escaped quotes</li> <li>Create zones before records to avoid dependency issues</li> <li>Check for duplicates before creating resources</li> <li>Monitor metrics for failed reconciliations</li> </ol>"},{"location":"guides/zones/","title":"Zone deployment","text":""},{"location":"guides/zones/#specification","title":"Specification","text":"<p>The <code>Zone</code> specification contains the following fields:</p> Field Type Required Description kind string Y Kind of the zone, one of \"Native\", \"Master\", \"Slave\", \"Producer\", \"Consumer\" nameservers []string Y List of the nameservers of the zone catalog string N The catalog this zone is a member of soa_edit_api string N The SOA-EDIT-API metadata item, one of \"DEFAULT\", \"INCREASE\", \"EPOCH\", defaults to \"DEFAULT\""},{"location":"guides/zones/#example","title":"Example","text":"<pre><code>apiVersion: dns.cav.enablers.ob/v1alpha2\nkind: Zone\nmetadata:\n  name: helloworld.com\n  namespace: default\nspec:\n  nameservers:\n    - ns1.helloworld.com\n    - ns2.helloworld.com\n  kind: Master\n  catalog: catalog.helloworld\n  soa_edit_api: EPOCH\n</code></pre>"},{"location":"guides/zones/#reconciliation-flow","title":"Reconciliation Flow","text":"<p>The following diagram illustrates the reconciliation flow for Zone resources:</p> <pre><code>sequenceDiagram\n    participant U as User\n    participant K as Kubernetes API\n    participant C as Controller\n    participant P as PowerDNS API\n    participant M as Metrics\n\n    U-&gt;&gt;K: kubectl apply zone.yaml -n default\n    K-&gt;&gt;C: Zone Created Event (namespace-scoped)\n\n    Note over C: Reconciliation Loop Starts\n    C-&gt;&gt;C: Check Deletion Timestamp\n\n    alt Resource is being deleted\n        C-&gt;&gt;P: DELETE /api/v1/servers/localhost/zones/example.com\n        P--&gt;&gt;C: Zone Deleted\n        C-&gt;&gt;C: Remove Finalizers\n        C-&gt;&gt;K: Update Zone\n        Note over C: Deletion Complete\n    else Resource is being created/updated\n        C-&gt;&gt;C: Add Finalizers if missing\n        C-&gt;&gt;C: Check for duplicate zones (namespace-aware)\n\n        alt Duplicate zone found\n            C-&gt;&gt;K: Set Failed Status\n            C-&gt;&gt;K: Set Duplicated Condition\n            C-&gt;&gt;M: Update Metrics\n            Note over C: Reconciliation Failed\n        else No duplicates\n            C-&gt;&gt;P: GET /api/v1/servers/localhost/zones/example.com\n\n            alt Zone doesn't exist in PowerDNS\n                C-&gt;&gt;P: POST /api/v1/servers/localhost/zones\n                Note over P: Create Zone with NS records\n                P--&gt;&gt;C: Zone Created Successfully\n            else Zone exists in PowerDNS\n                C-&gt;&gt;C: Compare desired vs actual state\n                alt Differences found\n                    C-&gt;&gt;P: PATCH /api/v1/servers/localhost/zones/example.com\n                    P--&gt;&gt;C: Zone Updated Successfully\n                end\n            end\n\n            C-&gt;&gt;K: Update Zone Status\n            C-&gt;&gt;K: Set Available Condition\n            C-&gt;&gt;M: Update Metrics\n            Note over C: Reconciliation Succeeded\n        end\n    end\n\n    K--&gt;&gt;U: Zone Status Updated</code></pre>"},{"location":"introduction/faq/","title":"FAQ","text":""},{"location":"introduction/faq/#general-questions","title":"General Questions","text":""},{"location":"introduction/faq/#can-i-use-powerdns-admin-and-powerdns-operator-together","title":"Can I use PowerDNS-Admin and PowerDNS Operator together?","text":"<p>Yes, but with caution. The operator only supports the official PowerDNS API, while PowerDNS-Admin implements its own custom API. Both can coexist, but avoid managing the same resources with both tools to prevent conflicts.</p>"},{"location":"introduction/faq/#can-i-manage-multiple-powerdns-servers-with-a-single-operator","title":"Can I manage multiple PowerDNS servers with a single operator?","text":"<p>No. The operator is designed to manage a single PowerDNS server. For multiple servers, deploy separate operator instances in different clusters.</p>"},{"location":"introduction/faq/#does-the-operator-check-for-configuration-drift","title":"Does the operator check for configuration drift?","text":"<p>No. The operator only reconciles on Kubernetes events (create, update, delete). It does not periodically check for drift between Kubernetes resources and PowerDNS. This feature may be added in future versions.</p>"},{"location":"introduction/faq/#technical-questions","title":"Technical Questions","text":""},{"location":"introduction/faq/#what-happens-if-i-delete-a-zone-that-has-records","title":"What happens if I delete a zone that has records?","text":"<p>The operator will delete the zone from PowerDNS, which removes all records in that zone. Additionally, due to Kubernetes owner references, all RRSets and ClusterRRSets that reference the deleted zone will be automatically deleted from Kubernetes as well. This cascading deletion ensures that orphaned records don't remain in the cluster.</p>"},{"location":"introduction/faq/#can-i-use-the-operator-with-powerdns-recursor","title":"Can I use the operator with PowerDNS Recursor?","text":"<p>No. The operator only works with PowerDNS Authoritative Server. The Recursor does not have the same API for zone and record management.</p>"},{"location":"introduction/faq/#how-do-i-handle-dns-propagation-delays","title":"How do I handle DNS propagation delays?","text":"<p>The operator manages the PowerDNS server configuration but does not control DNS propagation. Consider TTL values and upstream DNS server configurations for propagation timing.</p>"},{"location":"introduction/faq/#troubleshooting","title":"Troubleshooting","text":""},{"location":"introduction/faq/#my-zone-shows-failed-status","title":"My zone shows \"Failed\" status","text":"<p>Check for: - Duplicate zones with the same FQDN - PowerDNS API connectivity issues - Invalid zone configuration (nameservers, etc.) - PowerDNS Operator logs</p>"},{"location":"introduction/faq/#my-records-are-not-being-created","title":"My records are not being created","text":"<p>Check for: - Referenced zone exists and is healthy - No duplicate records with the same name and type - PowerDNS API permissions - Record format (especially for CNAME, MX, SRV records) - PowerDNS Operator logs</p>"},{"location":"introduction/getting-started/","title":"Getting Started","text":""},{"location":"introduction/getting-started/#prerequisites","title":"Prerequisites","text":"<p>For detailed prerequisites and compatibility information, see the Stability and Support documentation.</p>"},{"location":"introduction/getting-started/#installation","title":"Installation","text":""},{"location":"introduction/getting-started/#option-1-helm-installation","title":"Option 1: Helm Installation","text":"<p>Check out the PowerDNS Operator Helm chart repository here.</p> <pre><code># Add the Helm repository\nhelm repo add powerdns-operator https://powerdns-operator.github.io/PowerDNS-Operator-helm-chart\nhelm repo update\n\n# Install the latest operator release\nhelm install powerdns-operator powerdns-operator/powerdns-operator \\\n  --namespace powerdns-operator-system \\\n  --create-namespace \\\n  --set api.url=https://your-powerdns-server:8081 \\\n  --set credentials.data.PDNS_API_KEY=you-api-key\n</code></pre>"},{"location":"introduction/getting-started/#option-2-direct-installation","title":"Option 2: Direct Installation","text":"<p>Custom Configuration</p> <p>The bundle installation method installs the operator with default configuration. If you need to customize the operator configuration (e.g., modify resource limits, add sidecars, or change deployment settings), you'll need to patch the bundle using tools like Kustomize.</p> <pre><code># Create namespace\nkubectl create namespace powerdns-operator-system\n\n# Create PowerDNS configuration secret\nkubectl apply -f - &lt;&lt;EOF\napiVersion: v1\nkind: Secret\nmetadata:\n  name: powerdns-operator-manager\n  namespace: powerdns-operator-system\ntype: Opaque\nstringData:\n  PDNS_API_URL: https://your-powerdns-server:8081\n  PDNS_API_KEY: your-api-key\n  PDNS_API_VHOST: localhost\nEOF\n\n# Install the operator\nkubectl apply -f https://github.com/powerdns-operator/PowerDNS-Operator/releases/latest/download/bundle.yaml\n\n# Or, install specific version of the operator - replace v0.0.0 with your desired version\nkubectl apply -f https://github.com/powerdns-operator/PowerDNS-Operator/releases/download/v0.0.0/bundle.yaml\n</code></pre>"},{"location":"introduction/getting-started/#configuration","title":"Configuration","text":""},{"location":"introduction/getting-started/#environment-variables","title":"Environment Variables","text":"Variable Description Required Default <code>PDNS_API_URL</code> PowerDNS API server URL Yes None <code>PDNS_API_KEY</code> PowerDNS API authentication key Yes None <code>PDNS_API_VHOST</code> PowerDNS virtual host No <code>localhost</code> <code>PDNS_API_TIMEOUT</code> PowerDNS API request timeout in seconds No <code>10</code>"},{"location":"introduction/getting-started/#verification","title":"Verification","text":"<pre><code># Check operator status\nkubectl get pods -n powerdns-operator-system\n\n# Verify CRDs are installed\nkubectl get crd | grep dns.cav.enablers.ob\n\n# Test with a simple zone\nkubectl apply -f - &lt;&lt;EOF\napiVersion: dns.cav.enablers.ob/v1alpha2\nkind: ClusterZone\nmetadata:\n  name: test.example.com\nspec:\n  kind: Native\n  nameservers:\n    - ns1.test.example.com\n    - ns2.test.example.com\nEOF\n</code></pre>"},{"location":"introduction/overview/","title":"Overview","text":""},{"location":"introduction/overview/#architecture","title":"Architecture","text":"<p>The PowerDNS Operator extends Kubernetes with Custom Resource Definitions (CRDs) to manage PowerDNS zones and records declaratively. The operator watches for changes to these resources and reconciles them with the PowerDNS API.</p>"},{"location":"introduction/overview/#resource-model","title":"Resource Model","text":"<p>The operator supports four main resource types:</p>"},{"location":"introduction/overview/#1-clusterzone-cluster-wide","title":"1. ClusterZone (Cluster-wide)","text":"<p>Platform teams create cluster-wide zones that are available across all namespaces.</p> <pre><code>---\napiVersion: dns.cav.enablers.ob/v1alpha2\nkind: ClusterZone\nmetadata:\n  name: example.org\nspec:\n  nameservers:\n    - ns1.example.org\n    - ns2.example.org\n  kind: Native\n</code></pre>"},{"location":"introduction/overview/#2-clusterrrset-cluster-wide","title":"2. ClusterRRset (Cluster-wide)","text":"<p>Platform teams create cluster-wide records for infrastructure services.</p> <pre><code>---\napiVersion: dns.cav.enablers.ob/v1alpha2\nkind: ClusterRRset\nmetadata:\n  name: soa.example.org\nspec:\n  name: example.org.\n  records:\n  - ns1.example.org. admin.example.org. 1 10800 3600 604800 3600\n  ttl: 3600\n  type: SOA\n  zoneRef:\n    name: example.org\n    kind: ClusterZone\n---\napiVersion: dns.cav.enablers.ob/v1alpha2\nkind: ClusterRRset\nmetadata:\n  name: mx.example.org\nspec:\n  type: MX\n  name: \"example.org.\"\n  ttl: 300\n  records:\n    - \"10 mx1.example.org.\"\n    - \"20 mx2.example.org.\"\n  zoneRef:\n    name: example.org\n    kind: ClusterZone\n---\napiVersion: dns.cav.enablers.ob/v1alpha2\nkind: ClusterRRset\nmetadata:\n  name: ns1.example.org\nspec:\n  type: A\n  name: ns1\n  ttl: 300\n  records:\n    - \"10.25.32.1\"\n  zoneRef:\n    name: example.org\n    kind: ClusterZone\n---\napiVersion: dns.cav.enablers.ob/v1alpha2\nkind: ClusterRRset\nmetadata:\n  name: ns2.example.org\nspec:\n  type: A\n  name: ns2\n  ttl: 300\n  records:\n    - \"10.25.32.2\"\n  zoneRef:\n    name: example.org\n    kind: ClusterZone\n</code></pre>"},{"location":"introduction/overview/#3-zone-namespace-scoped","title":"3. Zone (Namespace-scoped)","text":"<p>Application teams create namespace-scoped zones for their applications.</p> <pre><code>---\napiVersion: dns.cav.enablers.ob/v1alpha2\nkind: Zone\nmetadata:\n  name: myapp1.example.org\n  namespace: myapp1\nspec:\n  nameservers:\n    - ns1.example.org\n    - ns2.example.org\n  kind: Native\n</code></pre>"},{"location":"introduction/overview/#4-rrset-namespace-scoped","title":"4. RRset (Namespace-scoped)","text":"<p>Application teams create records for their application services.</p> <pre><code>---\napiVersion: dns.cav.enablers.ob/v1alpha2\nkind: RRset\nmetadata:\n  name: soa.myapp1.example.org\n  namespace: myapp1\nspec:\n  name: myapp1.example.org.\n  records:\n  - ns1.example.org. admin.example.org. 1 10800 3600 604800 3600\n  ttl: 3600\n  type: SOA\n  zoneRef:\n    name: myapp1.example.org\n    kind: Zone\n---\napiVersion: dns.cav.enablers.ob/v1alpha2\nkind: RRset\nmetadata:\n  name: front.myapp1.example.org\n  namespace: myapp1\nspec:\n  type: A\n  name: front\n  ttl: 300\n  records:\n    - \"1.2.3.4\"\n  zoneRef:\n    name: myapp1.example.org\n    kind: Zone\n</code></pre>"},{"location":"introduction/stability-support/","title":"Stability and Support","text":""},{"location":"introduction/stability-support/#version-compatibility","title":"Version Compatibility","text":"Component Supported Versions PowerDNS Authoritative 4.7, 4.8, 4.9 Kubernetes 1.31, 1.32, 1.33 Go (for development) 1.24+"},{"location":"introduction/stability-support/#breaking-changes","title":"Breaking Changes","text":""},{"location":"introduction/stability-support/#breaking-changes-introduced-in-v04x-versions","title":"Breaking changes introduced in v0.4.x versions","text":"<p>We noticed lacks of security and delegation possibilities with &lt;=v0.3.x versions, so we decided to split previous <code>Zone</code> in 2 differents Custom Resources: </p> <ul> <li><code>ClusterZone</code> (cluster-wide resource)</li> <li><code>Zone</code> (namespaced resource)</li> </ul> <p>This decision introduces breaking changes</p> <ul> <li><code>Zone</code> was previously cluster-wide resource become namespace-scoped</li> <li><code>rrset.spec.zoneRef.kind</code> is a new mandatory field to indicate whereas the <code>RRset</code> depends on a <code>Zone</code> or a <code>ClusterZone</code></li> <li><code>rrset.status.syncErrorDescription</code> is replaced by a <code>Status.Condition</code> field as adviced by the community<sup>1</sup><sup>2</sup></li> </ul> <ol> <li> <p>https://heidloff.net/article/storing-state-status-kubernetes-resources-conditions-operators-go/\u00a0\u21a9</p> </li> <li> <p>https://maelvls.dev/kubernetes-conditions/\u00a0\u21a9</p> </li> </ol>"},{"location":"testing_environment/k3d/","title":"Testing Environment Setup","text":""},{"location":"testing_environment/k3d/#local-kubernetes-with-k3d","title":"Local Kubernetes with k3d","text":"<p>This guide shows how to set up a local testing environment using k3d. Other solutions like minikube, kind, or Talos can also be used.</p>"},{"location":"testing_environment/k3d/#prerequisites","title":"Prerequisites","text":"<ul> <li>k3d installed</li> <li>kubectl configured</li> <li>Docker running</li> </ul>"},{"location":"testing_environment/k3d/#setup-steps","title":"Setup Steps","text":""},{"location":"testing_environment/k3d/#1-create-local-registry-optional","title":"1. Create Local Registry (Optional)","text":"<pre><code>k3d registry create registry.localhost --port 5000\n</code></pre>"},{"location":"testing_environment/k3d/#2-create-kubernetes-cluster","title":"2. Create Kubernetes Cluster","text":"<p>Create a 3-node cluster with the following features:</p> <ul> <li>Traefik ingress controller on port 18081</li> <li>CSI storage on <code>/mnt/k3d</code> for data persistence</li> <li>Private registry access configured</li> </ul> <pre><code>cat &gt; ~/.k3d/k3d-cluster.yaml &lt;&lt;EOF\napiVersion: k3d.io/v1alpha5\nkind: Simple\nmetadata:\n  name: k3d\nservers: 1\nagents: 2\nvolumes:\n  - volume: \"/etc/ssl/certs/ca-certificates.crt:/etc/ssl/certs/ca-certificates.crt\"\n  - volume: /mnt/k3d:/var/lib/rancher/k3s/storage\n    nodeFilters:\n      - server:0\n      - agent:*\nports:\n  - port: 18081:80\n    nodeFilters:\n      - loadbalancer\nregistries:\n  use:\n    - k3d-registry.localhost:5000\nEOF\n\nk3d cluster create --config ~/.k3d/k3d-cluster.yaml\n</code></pre>"},{"location":"testing_environment/k3d/#3-verify-setup","title":"3. Verify Setup","text":"<pre><code># Check cluster status\nkubectl cluster-info\n\n# Check nodes\nkubectl get nodes\n\n# Check ingress controller\nkubectl get pods -n kube-system | grep traefik\n</code></pre>"},{"location":"testing_environment/k3d/#next-steps","title":"Next Steps","text":"<ul> <li>Install PowerDNS</li> <li>Deploy PowerDNS Operator</li> <li>Test with examples</li> </ul>"},{"location":"testing_environment/powerdns/","title":"PowerDNS Deployment","text":""},{"location":"testing_environment/powerdns/#deployment-options","title":"Deployment Options","text":""},{"location":"testing_environment/powerdns/#option-1-using-the-official-deployment","title":"Option 1: Using the Official Deployment","text":"<p>For a full clustered PowerDNS setup, check this repository:</p> <p>PowerDNS Deployment</p> <p>This repository provides:</p> <ul> <li>Complete PowerDNS cluster setup</li> <li>MariaDB backend configuration</li> <li>High availability configuration</li> <li>Monitoring and logging setup</li> </ul>"},{"location":"testing_environment/powerdns/#option-2-manual-installation-debianubuntu","title":"Option 2: Manual Installation (Debian/Ubuntu)","text":"<p>For testing or simple setups, you can install PowerDNS manually:</p> <pre><code># Install PowerDNS on Ubuntu/Debian\napt update &amp;&amp; apt install -y pdns-server pdns-backend-mysql\n\n# Configure PowerDNS\n# Edit /etc/powerdns/pdns.conf\n</code></pre>"},{"location":"testing_environment/powerdns/#option-3-docker-deployment","title":"Option 3: Docker Deployment","text":"<pre><code># Run PowerDNS with SQLite backend\ndocker run -d \\\n  --name powerdns \\\n  -p 53:53 -p 53:53/udp -p 8081:8081 \\\n  -e PDNS_api=yes \\\n  -e PDNS_api_key=your-secret-key \\\n  -e PDNS_webserver=yes \\\n  -e PDNS_webserver_address=0.0.0.0 \\\n  -e PDNS_webserver_allow_from=0.0.0.0/0 \\\n  pschiffe/pdns-mysql\n</code></pre>"},{"location":"testing_environment/powerdns/#configuration-requirements","title":"Configuration Requirements","text":"<p>Ensure your PowerDNS instance has:</p> <ul> <li>API enabled: <code>api=yes</code> in configuration</li> <li>Web server enabled: <code>webserver=yes</code> for API access</li> <li>API key configured: Secure authentication key</li> <li>Network access: Accessible from Kubernetes cluster</li> </ul>"}]}